{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/user.ts","api/todos.ts","components/Loader/Loader.tsx","components/TodosList/TodosList.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","DELETE_TODO","loadTodosAction","payload","type","loadUserAction","initialState","todos","user","store","createStore","state","action","filter","todo","id","getTodosSelector","getUserSelector","getUserIdSelector","CurrentUser","dispatch","useDispatch","useSelector","className","name","email","phone","onClick","BASE_URL","getUser","userId","a","fetch","res","json","getTodos","todoId","method","Loader","TodosList","useState","title","setTitle","filterBy","setFilterBy","isLoading","setIsLoading","selectedUserId","handleClick","userFromServer","useEffect","loadTodosFromServer","todosFromServer","handleDeleteTodo","deleteTodo","visibleTodos","toLowerCase","includes","completed","placeholder","value","onChange","event","target","map","classNames","htmlFor","checked","newTodoStatus","changeStatus","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85aab04b.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const loadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n\nexport const deleteTodoAction = (payload: number) => ({\n  type: DELETE_TODO,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport { DELETE_TODO, LOAD_TODOS, LOAD_USER } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getUserSelector = (state: State) => state.user;\nexport const getUserIdSelector = (state: State) => state.user?.id;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { loadUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\n\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n\n  if (!user) {\n    return (\n      <div className=\"user\">\n        No selected user\n      </div>\n    );\n  }\n\n  const clearUser = () => {\n    dispatch(loadUserAction(null));\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        className=\"button CurrentUser__clear\"\n        type=\"button\"\n        onClick={clearUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import { User } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api/users';\n\nexport async function getUser(userId: number): Promise<User> {\n  const res = await fetch(`${BASE_URL}/${userId}`);\n\n  return res.json();\n}\n","import { Todo } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api/todos';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const res = await fetch(BASE_URL);\n\n  return res.json();\n}\n\nexport async function deleteTodo(todoId: number): Promise<Todo[]> {\n  const res = await fetch(`${BASE_URL}/${todoId}`, {\n    method: 'DELETE',\n  });\n\n  return res.json();\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { getTodosSelector, getUserIdSelector } from '../../store/selectors';\nimport { deleteTodoAction, loadTodosAction, loadUserAction } from '../../store/actions';\nimport { getUser } from '../../api/user';\nimport { deleteTodo, getTodos } from '../../api/todos';\n\nimport './TodosList.scss';\nimport { Loader } from '../Loader';\n\nexport const TodosList: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [filterBy, setFilterBy] = useState('all');\n  const [isLoading, setIsLoading] = useState(false);\n  const selectedUserId = useSelector(getUserIdSelector);\n\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getTodosSelector);\n\n  const handleClick = async (userId: number) => {\n    const userFromServer = await getUser(userId);\n\n    dispatch(loadUserAction(userFromServer));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(loadTodosAction(todosFromServer));\n      setIsLoading(false);\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const handleDeleteTodo = (todoId: number) => {\n    deleteTodo(todoId);\n    dispatch(deleteTodoAction(todoId));\n  };\n\n  const filteredTodos = todos.filter(todo => todo.title\n    .toLowerCase().includes(title.toLowerCase()));\n  const visibleTodos = filteredTodos.filter(todo => {\n    switch (filterBy) {\n      case 'all':\n        return todo;\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return 0;\n    }\n  });\n\n  const changeStatus = (userId: number) => {\n    const newTodoStatus = todos.map(todo => {\n      if (todo.id === userId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    dispatch(loadTodosAction(newTodoStatus));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        className=\"input is-primary\"\n        placeholder=\"Wrire a title\"\n        name=\"title\"\n        type=\"text\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n      <div className=\"select is-primary\">\n        <select\n          name=\"status\"\n          value={filterBy}\n          onChange={(event) => setFilterBy(event.target.value)}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"completed\">completed</option>\n          <option value=\"active\">incompleted</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {!isLoading\n              ? (visibleTodos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--unchecked': !todo.completed,\n                      'TodoList__item--checked': todo.completed,\n                    },\n                  )}\n                >\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    onClick={() => handleDeleteTodo(todo.id)}\n                  >\n                    Delete\n                  </button>\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      type=\"checkbox\"\n                      id={`${todo.id}`}\n                      checked={todo.completed}\n                      onChange={() => changeStatus(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      'button',\n                      { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                    )}\n                    type=\"button\"\n                    onClick={() => selectedUserId !== todo.userId && handleClick(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              )))\n              : <Loader />}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodosList } from './components/TodosList/TodosList';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodosList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\n\nimport store from './store';\nimport App from './App';\n\nimport 'bulma/css/bulma.css';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}